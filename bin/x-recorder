#! /usr/bin/env node

var childProcess = require('child_process'),
    Recorder = require('../lib/x-recorder'),
    optimist = require('optimist'),
    argv,
    opts;

opts = optimist.
  usage('Records X11 display of a given shell command\n Usage: $0 [options]').
  option('output', {
    desc: 'Movie output file',
    demand: true,
    alias: 'o'
  }).
  option('script', {
    alias: 's',
    desc: 'Shell script to execute (wrap it in quotes)',
    demand: true
  });

argv = opts.argv;

if (argv.help) {
  opts.showHelp();
  process.exit(1);
}

function CaptureHandler(argv) {
  var xvfb,
      xcapture;

  xvfb = new Recorder.Xvfb();
  xvfb.start(startCapture);

  function startCapture(err, display) {
    var userArgs = argv.script.split(' ');

    xcapture = new Recorder.XCapture({
      display: xvfb.display,
      output: argv.output
    });

    process.env.DISPLAY = ':' + String(xvfb.display);

    xcapture.start(function() {
      var child = childProcess.spawn(userArgs[0], userArgs.slice(1));

      child.stdout.on('data', function(data) {
        process.stdout.write(data.toString());
      });

      child.stderr.on('data', function(data){
        process.stderr.write(data.toString());
      });

      function waitForChild() {
        waitForChild();
        setTimeout(waitForChild, 10000000);
      }

      function stopRecording(cb) {
        xcapture.stop(function() {
          xvfb.stop(function() {
            console.log('Stopped recording output:', argv.output);
            if (typeof(cb) === 'function') {
              cb();
            }
          });
        });
      }

      process.on('exit', stopRecording);

      child.on('exit', function(code) {
        stopRecording(function() {
          process.exit(code);
        });
      });
    });
  }
};


var capture = new CaptureHandler(argv);
